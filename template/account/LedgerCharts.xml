<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<screen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/xml-screen-2.1.xsd">

    <widgets>
        <section name="SelectOrganization"><actions>
            <entity-find entity-name="mantle.party.PartyDetailAndRole" list="orgList">
                <econdition field-name="partyId" from="activeOrgId" ignore="!activeOrgId"/>
                <econdition field-name="roleTypeId" value="OrgInternal"/>
                <econdition field-name="disabled" value="N" or-null="true"/>
                <order-by field-name="organizationName"/>
            </entity-find>
            <if condition="!organizationPartyId &amp;&amp; orgList"><set field="organizationPartyId" from="orgList[0].partyId"/></if>
        </actions><widgets>
            <form-single name="SelectOrganizationForm" transition=".">
                <field name="organizationPartyId"><default-field title="">
                    <drop-down><list-options list="orgList" key="${partyId}" text="PartyNameTemplate"/></drop-down>
                </default-field></field>
                <field name="timePeriodTypeId"><default-field title=""><drop-down><option key="FiscalMonth" text="Month"/>
                    <option key="FiscalQuarter" text="Quarter"/></drop-down></default-field></field>
                <field name="periods"><default-field title=""><text-line size="2" default-value="13"/></default-field></field>
                <field name="thruDate"><default-field title=""><date-time type="date"/></default-field></field>
                <field name="setOrg"><default-field title="View Charts"><submit/></default-field></field>
                <field-layout><field-row-big><field-ref name="organizationPartyId"/><field-ref name="timePeriodTypeId"/>
                    <field-ref name="periods"/><field-ref name="thruDate"/><field-ref name="setOrg"/></field-row-big></field-layout>
            </form-single>
        </widgets></section>

        <!-- ============================================= -->
        <!-- ========== Income Statement Charts ========== -->
        <!-- ============================================= -->

        <section name="OperatingRevenueExpenseChart" condition="organizationPartyId"><actions>
            <script>
                datasets = [
                        [classGroupEnumId:'EngGlcNetRevenue'],
                        [label:'Cost of Sales', classes:['COST_OF_SALES'], stack:'Expense'],
                        [label:'Sales Expense', classes:['SALES_EXPENSE'], stack:'Expense'],
                        [label:'Gen/Admin Expense', classes:['GEN_ADMIN_EXPENSE'], stack:'Expense'],
                        [label:'Other Expense', classes:['CONTRIBUTIONS', 'NON_CASH_EXPENSE'], stack:'Expense'],
                        [classGroupEnumId:'EngGlcNetOpIncome', type:'line', fill:false]
                ]
            </script>
            <service-call name="mantle.party.TimeServices.find#PartyTimePeriodGroups" out-map="periodsOut"
                    in-map="[partyId:organizationPartyId, timePeriodTypeId:timePeriodTypeId, thruDate:thruDate, groups:(periods?:13)]"/>
            <if condition="periodsOut.timePeriodGroups">
                <service-call name="mantle.ledger.LedgerReportServices.get#PeriodSeriesSummary" out-map="context"
                        in-map="[organizationPartyId:organizationPartyId, timePeriodGroups:periodsOut.timePeriodGroups, datasets:datasets]"/>

                <service-call name="mantle.ledger.LedgerReportServices.get#PeriodSeriesSummaryRows" out-map="context" in-map="context"/>
                <set field="revenueExpenseCsv" from="rowsList.collect({ it.join(',') }).join('\n')"/>
                <!-- <iterate list="rowsList" entry="row"><log message="Row ${row_index}: ${row}"/></iterate> -->
            </if>
        </actions><widgets>
            <container-box><box-header title="Operating Revenue and Expense"/><box-toolbar>
                <render-mode><text type="html,vuet"><![CDATA[
                <button type="button" class="btn btn-primary btn-sm" onclick="moqui.downloadData('${(revenueExpenseCsv!"")?js_string}', 'OperatingRevenueExpense.csv', 'text/csv')">Get CSV</button>
                ]]></text></render-mode>
            </box-toolbar><box-body>
                <render-mode><text type="html,vuet"><![CDATA[
                <div class="chart-container" style="position:relative; height:400px; width:100%;"><canvas id="RevenueExpenseChart"></canvas></div>
                <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js" type="text/javascript"></script>
                <script>
                var revenueExpenseChart = new Chart(document.getElementById("RevenueExpenseChart"), {
                    type: 'bar',
                    data: { labels:${Static["groovy.json.JsonOutput"].toJson(periodLabels!"")},
                        datasets:${Static["groovy.json.JsonOutput"].toJson(datasets!"")} },
                    options: {
                        scales:{ yAxes:[{ ticks:{ beginAtZero:true } }] }, maintainAspectRatio:false,
                        tooltips:{ callbacks:{ label: function(tooltipItem, data) {
                            var dataset = data.datasets[tooltipItem.datasetIndex];
                            var datasetLabel = dataset.label || '';
                            var curValue = dataset.data[tooltipItem.index];
                            // NOTE: datasetIndex 0 is net revenue, the first dataset in the list
                            if (tooltipItem.datasetIndex == 0) { return datasetLabel + ": " + moqui.format(curValue, null, "currency"); }
                            // calculate and show percent of net revenue for expenses
                            var netRevenue = data.datasets[0].data[tooltipItem.index];
                            var percentOfNet = netRevenue ? (curValue / netRevenue) * 100.0 : 0.0;
                            return datasetLabel + ": " + moqui.format(dataset.data[tooltipItem.index], null, "currency") + " (" + percentOfNet.toFixed(1) + "% net)";
                        }}}
                    }
                });
                </script>
                ]]></text></render-mode>
            </box-body></container-box>
        </widgets></section>
        <section name="NetIncomeChart" condition="organizationPartyId"><actions>
            <script>
                datasets = [
                        [classGroupEnumId:'EngGlcNetRevenue', stack:'Income'],
                        [label:'Non Op Income', classes:['INCOME'], stack:'Income'],
                        [label:'Cost of Sales', classes:['COST_OF_SALES'], stack:'Expense'],
                        [label:'Operating Expense', classes:['EXPENSE'], stack:'Expense'],
                        [label:'Non Op Expense', classes:['NON_OP_EXPENSE'], stack:'Expense'],
                        [classGroupEnumId:'EngGlcNetIncome', type:'line', fill:false]
                ]
            </script>
            <service-call name="mantle.party.TimeServices.find#PartyTimePeriodGroups" out-map="periodsOut"
                    in-map="[partyId:organizationPartyId, timePeriodTypeId:timePeriodTypeId, thruDate:thruDate, groups:(periods?:13)]"/>
            <if condition="periodsOut.timePeriodGroups">
                <service-call name="mantle.ledger.LedgerReportServices.get#PeriodSeriesSummary" out-map="context"
                        in-map="[organizationPartyId:organizationPartyId, timePeriodGroups:periodsOut.timePeriodGroups, datasets:datasets]"/>

                <service-call name="mantle.ledger.LedgerReportServices.get#PeriodSeriesSummaryRows" out-map="context" in-map="context"/>
                <set field="netIncomeCsv" from="rowsList.collect({ it.join(',') }).join('\n')"/>
                <!-- <iterate list="rowsList" entry="row"><log message="Row ${row_index}: ${row}"/></iterate> -->
            </if>
        </actions><widgets>
            <container-box><box-header title="Net Income History"/><box-toolbar>
                <render-mode><text type="html,vuet"><![CDATA[
                <button type="button" class="btn btn-primary btn-sm" onclick="moqui.downloadData('${(netIncomeCsv!"")?js_string}', 'NetIncomeHistory.csv', 'text/csv')">Get CSV</button>
                ]]></text></render-mode>
            </box-toolbar><box-body>
                <render-mode><text type="html,vuet"><![CDATA[
                <div class="chart-container" style="position:relative; height:400px; width:100%;"><canvas id="NetIncomeChart"></canvas></div>
                <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js" type="text/javascript"></script>
                <script>
                var netIncomeChart = new Chart(document.getElementById("NetIncomeChart"), {
                    type: 'bar',
                    data: { labels:${Static["groovy.json.JsonOutput"].toJson(periodLabels!"")},
                        datasets:${Static["groovy.json.JsonOutput"].toJson(datasets!"")} },
                    options: {
                        scales:{ yAxes:[{ ticks:{ beginAtZero:true } }] }, maintainAspectRatio:false,
                        tooltips:{ callbacks:{ label: function(tooltipItem, data) {
                            var dataset = data.datasets[tooltipItem.datasetIndex]; var datasetLabel = dataset.label || '';
                            return datasetLabel + ": " + moqui.format(dataset.data[tooltipItem.index], null, "currency");
                        }}}
                    }
                });
                </script>
                ]]></text></render-mode>
            </box-body></container-box>
        </widgets></section>
        <section name="NetIncomeYoyChart" condition="organizationPartyId"><actions>
            <script>
                datasets = [ [classGroupEnumId:'EngGlcNetIncome', fill:false], [classGroupEnumId:'EngGlcNetOpIncome', fill:false] ]
                priorDatasets = [
                        [datasetId:'PNI', label:'Prior Net Income', classGroupEnumId:'EngGlcNetIncome',
                                backgroundColor:'rgba(240, 173, 78, 0.5)', borderColor:'rgba(240, 173, 78, 1.0)', pointStyle:'triangle', fill:false],
                        [datasetId:'PNOI', label:'Prior Net Operating Income', classGroupEnumId:'EngGlcNetOpIncome',
                                backgroundColor:'rgba(217, 83, 79, 0.5)', borderColor:'rgba(217, 83, 79, 1.0)', pointStyle:'triangle', fill:false] ]
            </script>
            <service-call name="mantle.party.TimeServices.find#PartyTimePeriodGroups" out-map="periodsOut"
                    in-map="[partyId:organizationPartyId, timePeriodTypeId:timePeriodTypeId, thruDate:thruDate, groups:(periods?:13)]"/>
            <if condition="periodsOut.timePeriodGroups">
                <service-call name="mantle.ledger.LedgerReportServices.get#PeriodSeriesSummary" out-map="context"
                        in-map="[organizationPartyId:organizationPartyId, timePeriodGroups:periodsOut.timePeriodGroups, datasets:datasets]"/>

                <if condition="periodsOut.timePeriodGroups[0]">
                    <set field="earliestPeriodId" from="periodsOut.timePeriodGroups[0][0]"/>
                    <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="earliestPeriod">
                        <field-map field-name="timePeriodId" from="earliestPeriodId"/></entity-find-one>
                    <set field="priorThruDate" from="earliestPeriod.fromDate - 1"/>
                    <service-call name="mantle.party.TimeServices.find#PartyTimePeriodGroups" out-map="priorPeriodsOut"
                            in-map="[partyId:organizationPartyId, timePeriodTypeId:timePeriodTypeId, thruDate:priorThruDate]"/>
                    <if condition="priorPeriodsOut.timePeriodGroups">
                        <service-call name="mantle.ledger.LedgerReportServices.get#PeriodSeriesSummary" out-map="priorOut"
                                in-map="[organizationPartyId:organizationPartyId, timePeriodGroups:priorPeriodsOut.timePeriodGroups, datasets:priorDatasets]"/>
                        <script>datasets.add(priorOut.datasetsById.get("PNI")); datasets.add(priorOut.datasetsById.get("PNOI"))</script>
                    </if>
                </if>

                <service-call name="mantle.ledger.LedgerReportServices.get#PeriodSeriesSummaryRows" out-map="context" in-map="context"/>
                <set field="netIncomeYoyCsv" from="rowsList.collect({ it.join(',') }).join('\n')"/>
                <!-- <iterate list="rowsList" entry="row"><log message="Row ${row_index}: ${row}"/></iterate> -->
            </if>
        </actions><widgets>
            <container-box><box-header title="Net Income Year Over Year"/><box-toolbar>
                <render-mode><text type="html,vuet"><![CDATA[
                <button type="button" class="btn btn-primary btn-sm" onclick="moqui.downloadData('${(netIncomeYoyCsv!"")?js_string}', 'NetIncomeYoyHistory.csv', 'text/csv')">Get CSV</button>
                ]]></text></render-mode>
            </box-toolbar><box-body>
                <render-mode><text type="html,vuet"><![CDATA[
                <div class="chart-container" style="position:relative; height:400px; width:100%;"><canvas id="NetIncomeYoyChart"></canvas></div>
                <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js" type="text/javascript"></script>
                <script>
                var netIncomeYoyChart = new Chart(document.getElementById("NetIncomeYoyChart"), {
                    type: 'line',
                    data: { labels:${Static["groovy.json.JsonOutput"].toJson(periodLabels!"")},
                        datasets:${Static["groovy.json.JsonOutput"].toJson(datasets!"")} },
                    options: {
                        scales:{ yAxes:[{ ticks:{ beginAtZero:true } }] }, maintainAspectRatio:false,
                        tooltips:{ callbacks:{ label: function(tooltipItem, data) {
                            var dataset = data.datasets[tooltipItem.datasetIndex]; var datasetLabel = dataset.label || '';
                            return datasetLabel + ": " + moqui.format(dataset.data[tooltipItem.index], null, "currency");
                        }}}
                    }
                });
                </script>
                ]]></text></render-mode>
            </box-body></container-box>
        </widgets></section>

        <!-- ========================================== -->
        <!-- ========== Balance Sheet Charts ========== -->
        <!-- ========================================== -->

        <section name="CurrentAssetLiabilityChart" condition="organizationPartyId"><actions>
            <script>
                datasets = [
                        [label:'Cash', classes:['CASH_EQUIVALENT'], totalBasis:'Ending', stack:'Asset'],
                        [label:'Inventory', classes:['INVENTORY_ASSET'], totalBasis:'Ending', stack:'Asset'],
                        [label:'Receivable', classes:['ACCOUNTS_RECEIVABLE'], totalBasis:'Ending', stack:'Asset'],
                        [label:'Other Cur Asset', classes:['LOANS_RECEIVABLE', 'PREPAID_EXPENSE', 'ACCRUED_REVENUE'], totalBasis:'Ending', stack:'Asset'],
                        [label:'Payable', classes:['ACCOUNTS_PAYABLE'], totalBasis:'Ending', stack:'Liability'],
                        [label:'Other Cur Liability', classes:['ACCRUED_EXPENSES', 'UNEARNED_REVENUE', 'THIRD_PARTY_HOLDINGS'], totalBasis:'Ending', stack:'Liability'],
                        [classGroupEnumId:'EngGlcNetIncome', type:'line', fill:false]
                ]
            </script>
            <service-call name="mantle.party.TimeServices.find#PartyTimePeriodGroups" out-map="periodsOut"
                    in-map="[partyId:organizationPartyId, timePeriodTypeId:timePeriodTypeId, thruDate:thruDate, groups:(periods?:13)]"/>
            <if condition="periodsOut.timePeriodGroups">
                <service-call name="mantle.ledger.LedgerReportServices.get#PeriodSeriesSummary" out-map="context"
                        in-map="[organizationPartyId:organizationPartyId, timePeriodGroups:periodsOut.timePeriodGroups, datasets:datasets]"/>

                <service-call name="mantle.ledger.LedgerReportServices.get#PeriodSeriesSummaryRows" out-map="context" in-map="context"/>
                <set field="assetLiabilityCsv" from="rowsList.collect({ it.join(',') }).join('\n')"/>
                <!-- <iterate list="rowsList" entry="row"><log message="Row ${row_index}: ${row}"/></iterate> -->
            </if>
        </actions><widgets>
            <container-box><box-header title="Current Assets and Liabilities"/><box-toolbar>
                <render-mode><text type="html,vuet"><![CDATA[
                <button type="button" class="btn btn-primary btn-sm" onclick="moqui.downloadData('${(assetLiabilityCsv!"")?js_string}', 'CurrentAssetLiability.csv', 'text/csv')">Get CSV</button>
                ]]></text></render-mode>
            </box-toolbar><box-body>
                <render-mode><text type="html,vuet"><![CDATA[
                <div class="chart-container" style="position:relative; height:400px; width:100%;"><canvas id="AssetLiabilityChart"></canvas></div>
                <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js" type="text/javascript"></script>
                <script>
                var assetLiabilityChart = new Chart(document.getElementById("AssetLiabilityChart"), {
                    type: 'bar',
                    data: { labels:${Static["groovy.json.JsonOutput"].toJson(periodLabels!"")},
                        datasets:${Static["groovy.json.JsonOutput"].toJson(datasets!"")} },
                    options: {
                        scales:{ yAxes:[{ ticks:{ beginAtZero:true } }] }, maintainAspectRatio:false,
                        tooltips:{ callbacks:{ label: function(tooltipItem, data) {
                            var dataset = data.datasets[tooltipItem.datasetIndex]; var datasetLabel = dataset.label || '';
                            return datasetLabel + ": " + moqui.format(dataset.data[tooltipItem.index], null, "currency");
                        }}}
                    }
                });
                </script>
                ]]></text></render-mode>
            </box-body></container-box>
        </widgets></section>
        <section name="BalanceSheetChart" condition="organizationPartyId"><actions>
            <script>
                datasets = [
                        [classGroupEnumId:'EngGlcNetAsset', totalBasis:'Ending', stack:'Asset'],
                        [classGroupEnumId:'EngGlcNetEquity', totalBasis:'Ending', stack:'LiabilityEquity'],
                        [classGroupEnumId:'EngGlcLiability', totalBasis:'Ending', stack:'LiabilityEquity'],
                        [label:'Unbooked Net Income', classGroupEnumId:'EngGlcNetIncome', totalBasis:'Posted', stack:'LiabilityEquity'],
                        [classGroupEnumId:'EngGlcNetIncome', type:'line', fill:false]
                ]
            </script>
            <service-call name="mantle.party.TimeServices.find#PartyTimePeriodGroups" out-map="periodsOut"
                    in-map="[partyId:organizationPartyId, timePeriodTypeId:timePeriodTypeId, thruDate:thruDate, groups:(periods?:13)]"/>
            <if condition="periodsOut.timePeriodGroups">
                <service-call name="mantle.ledger.LedgerReportServices.get#PeriodSeriesSummary" out-map="context"
                        in-map="[organizationPartyId:organizationPartyId, timePeriodGroups:periodsOut.timePeriodGroups, datasets:datasets]"/>

                <service-call name="mantle.ledger.LedgerReportServices.get#PeriodSeriesSummaryRows" out-map="context" in-map="context"/>
                <set field="balanceSheetCsv" from="rowsList.collect({ it.join(',') }).join('\n')"/>
                <!-- <iterate list="rowsList" entry="row"><log message="Row ${row_index}: ${row}"/></iterate> -->
            </if>
        </actions><widgets>
            <container-box><box-header title="Balance Sheet History"/><box-toolbar>
                <render-mode><text type="html,vuet"><![CDATA[
                <button type="button" class="btn btn-primary btn-sm" onclick="moqui.downloadData('${(balanceSheetCsv!"")?js_string}', 'BalanceSheetHistory.csv', 'text/csv')">Get CSV</button>
                ]]></text></render-mode>
            </box-toolbar><box-body>
                <render-mode><text type="html,vuet"><![CDATA[
                <div class="chart-container" style="position:relative; height:400px; width:100%;"><canvas id="BalanceSheetChart"></canvas></div>
                <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js" type="text/javascript"></script>
                <script>
                var balanceSheetChart = new Chart(document.getElementById("BalanceSheetChart"), {
                    type: 'bar',
                    data: { labels:${Static["groovy.json.JsonOutput"].toJson(periodLabels!"")},
                        datasets:${Static["groovy.json.JsonOutput"].toJson(datasets!"")} },
                    options: {
                        scales:{ yAxes:[{ ticks:{ beginAtZero:true } }] }, maintainAspectRatio:false,
                        tooltips:{ callbacks:{ label: function(tooltipItem, data) {
                            var dataset = data.datasets[tooltipItem.datasetIndex]; var datasetLabel = dataset.label || '';
                            return datasetLabel + ": " + moqui.format(dataset.data[tooltipItem.index], null, "currency");
                        }}}
                    }
                });
                </script>
                ]]></text></render-mode>
            </box-body></container-box>
        </widgets></section>
    </widgets>
</screen>
